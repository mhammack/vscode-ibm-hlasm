{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "IBM HLASM",
	"patterns": [
		{
			"include": "#hlasm_syntax"
		}
	],
	"repository": {
		"hlasm_syntax": {
			"patterns": [
				{
					"include": "#lineTooLong"
				},
				{
					"include": "#lineComment"
				},
				{
					"include": "#parseLine"
				},
				{
					"include": "#asmArgumentLine"
				},
				{
					"include": "#asmLineStart"
				}
			]
		},
		"additionalAsmHighlight": {
			"patterns": [
				{
					"include": "#labels"
				},
				{
					"include": "#asmSpecialStatements"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#numbers"
				}
			]
		},
		"lineTooLong": {
			"_description": "Assembler lines should only be 72 chars, at 73 the entire line should be in error",
			"patterns": [
				{
					"name": "invalid.illegal.hlasm",
					"match": "^.{81,}"
				}
			]
		},
		"lineComment": {
			"_description": "All statements that have a * in column 1",
			"patterns": [
				{
					"name": "comment.line.double-slash.hlasm",
					"match": "^(\\*.{70,70})(.*)",
					"captures": {
						"1": {
							"name": "comment.line.double-slash.hlasm"
						},
						"2": {
							"patterns": [
								{
									"match": "\\s(.{0,8})",
									"captures": {
										"1": {
											"_description": "SEQUENCE NUMBERS!!!!!",
											"patterns": [
												{
													"include": "#sequenceNumbers"
												}
											]
										}
									}
								},
								{
									"match": "([^\\s])(.{0,8})",
									"captures": {
										"1": {
											"name": "invalid.illegal.hlasm"
										},
										"2": {
											"_description": "SEQUENCE NUMBERS!!!!!",
											"patterns": [
												{
													"include": "#sequenceNumbers"
												}
											]
										}
									}
								}
							]
						}
					}
				},
				{
					"name": "comment.line.double-slash.hlasm",
					"match": "\\*.*"
				}
			]
		},
		"parseLine": {
			"patterns": [
				{
					"_description": "Continuation character that appears in column 72",
					"match": "^(.{71,71})([^\\s])(.{0,8})",
					"captures": {
						"1": {
							"_description": "Allow syntax highlighting of the rest of the line",
							"patterns": [
								{
									"include": "#asmArgumentLine"
								},
								{
									"include": "#asmLineStart"
								}
							]
						},
						"2": {
							"name": "keyword.other.hlasm"
						},
						"3": {
							"_description": "SEQUENCE NUMBERS!!!!!",
							"patterns": [
								{
									"include": "#sequenceNumbers"
								}
							]
						},
						"5": {
							"_description": "This next capture group is the entire next line",
							"patterns": [
								{
									"match": "\\S.*",
									"name": "invalid.illegal"
								}
							]
						}
					}
				},
				{
					"_description": "Sequence numbers for non-continuation lines",
					"match": "^(.{71,71})(\\s?)(.{0,8})$",
					"captures": {
						"1": {
							"_description": "Allow syntax highlighting of the rest of the line",
							"patterns": [
								{
									"include": "#asmArgumentLine"
								},
								{
									"include": "#asmLineStart"
								}
							]
						},
						"3": {
							"_description": "SEQUENCE NUMBERS!!!!!",
							"patterns": [
								{
									"include": "#sequenceNumbers"
								}
							]
						}
					}
				}
			]
		},
		"asmLineStart": {
			"_description": "The various parts of an assembler line",
			"patterns": [
				{
					"match": "^([^*]\\S*)?\\s+(.*)$",
					"captures": {
						"1": {
							"_description": "The label for a line.",
							"name": "entity.name.function.hlasm"
						},
						"2": {
							"_description": "The assembler instructions for this statement",
							"patterns": [
								{
									"include": "#asmInstruction"
								}
							]
						}
					}
				}
			]
		},
		"asmInstruction": {
			"_description": "A simple assembler source statement with 3 things. An instruction, parameters, and comment",
			"patterns": [
				{
					"match": "(\\S+)\\s*(.*)",
					"captures": {
						"1": {
							"name": "keyword.other.hlasm"
						},
						"2": {
							"patterns": [
								{
									"include": "#asmArguments"
								}
							]
						}
					}
				}
			]
		},
		"asmArgumentLine": {
			"_description": "This is for a line consisting of only an argument. This implies the previous line was a continuation",
			"patterns": [
				{
					"_description": "A line matching this syntax should follow the argument syntax",
					"match": "^\\s+(\\S+=.*)$",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#asmArguments"
								}
							]
						}
					}
				}
			]
		},
		"asmArguments": {
			"patterns": [
				{
					"include": "#stringType"
				},
				{
					"include": "#quoteType"
				},
				{
					"_description": "Handle no strings in instruction",
					"match": "(\\S*)(.*)",
					"captures": {
						"1": {
							"_description": "This group refers to an instruction operator",
							"name": "keyword.control.hlasm",
							"patterns": [
								{
									"include": "#additionalAsmHighlight"
								}
							]
						},
						"2": {
							"_description": "The rest of the line is a comment.",
							"name": "comment.line.double-slash.hlasm"
						}
					}
				},
				{
					"_description": "If the current pattern starts with a space, then we should comment the rest of the string",
					"match": "\\s.*",
					"name": "comment.line.double-slash.hlasm"
				}
			]
		},
		"stringType": {
			"patterns": [
				{
					"_description": "Handle strings in an instruction",
					"match": "(\\S*?)('.*?')(.*)",
					"captures": {
						"1": {
							"_description": "This group refers to an instruction operator",
							"name": "keyword.control.hlasm",
							"patterns": [
								{
									"include": "#additionalAsmHighlight"
								}
							]
						},
						"2": {
							"_description": "A string was found, so we can't be sure this is the end of the line",
							"name": "string.quoted.single.hlasm"
						},
						"3": {
							"_description": "Recursively call this rule to get all patterns.",
							"patterns": [
								{
									"include": "#asmArguments"
								}
							]
						}
					}
				}
			]
		},
		"quoteType": {
			"patterns": [
				{
					"_description": "Handle a length instruction",
					"match": "(\\S*?)([LKNT]')(.*)",
					"captures": {
						"1": {
							"_description": "This group refers to an instruction operator",
							"name": "keyword.control.hlasm",
							"patterns": [
								{
									"include": "#additionalAsmHighlight"
								}
							]
						},
						"2": {
							"_description": "Highlight the L' operator as a type",
							"name": "support.type.hlasm"
						},
						"3": {
							"_description": "Recursively call this rule to get all patterns.",
							"patterns": [
								{
									"include": "#asmArguments"
								}
							]
						}
					}
				}
			]
		},
		"labels": {
			"_description": "marks special labels in the code",
			"match": "[*]",
			"name": "support.function.hlasm"
		},
		"operators": {
			"_description": "marks operators properly",
			"match": "[=(),+]",
			"name": "keyword.operator.hlasm"
		},
		"numbers": {
			"_description": "marks numbers properly",
			"match": "(?<=[=(),*\\s+])-?\\d*(?=[=(),*+\\s]|$)",
			"name": "constant.numeric.hlasm"
		},
		"asmSpecialStatements": {
			"_description": "allows for special assembler statements",
			"match": "(?<=[=(),*+\\s])=?\\d*(A|B|C|D|E|F|G|H|P|V|X|Z)(L\\d*)?(?=[=(),*\\s+]|$)",
			"name": "support.type.hlasm"
		},
		"sequenceNumbers": {
			"name": "constant.numeric.hlasm",
			"match": ".*"
		}
	},
	"scopeName": "source.hlasm"
}